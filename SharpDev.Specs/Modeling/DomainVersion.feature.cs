// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SharpDev.Modeling
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DomainVersion")]
    public partial class DomainVersionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DomainVersion.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DomainVersion", "\tAllows to represent a version stamp", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new major version stamp")]
        [NUnit.Framework.CategoryAttribute("modeling")]
        [NUnit.Framework.TestCaseAttribute("0", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "9", new string[0])]
        [NUnit.Framework.TestCaseAttribute("17", "17", new string[0])]
        public virtual void CreateNewMajorVersionStamp(string major, string printed, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "modeling"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new major version stamp", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given(string.Format("A new major version is created with {0}", major), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("The version is printed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then(string.Format("The printed version looks like \"{0}\"", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new major.minor version stamp")]
        [NUnit.Framework.TestCaseAttribute("0", "0", "0.0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("0", "1", "0.1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "0", "1.0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1.1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "2", "9.2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("17", "3", "17.3", new string[0])]
        public virtual void CreateNewMajor_MinorVersionStamp(string major, string minor, string printed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new major.minor version stamp", exampleTags);
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given(string.Format("A new major.minor version is created with {0} and {1}", major, minor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.When("The version is printed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then(string.Format("The printed version looks like \"{0}\"", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new major.minor.revision version stamp")]
        [NUnit.Framework.TestCaseAttribute("0", "0", "2", "0.0.2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("0", "1", "3", "0.1.3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "0", "4", "1.0.4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "1", "5", "1.1.5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "2", "6", "9.2.6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("17", "3", "7", "17.3.7", new string[0])]
        public virtual void CreateNewMajor_Minor_RevisionVersionStamp(string major, string minor, string revision, string printed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new major.minor.revision version stamp", exampleTags);
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given(string.Format("A new major.minor.revision version is created with {0}, {1} and {2}", major, minor, revision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When("The version is printed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then(string.Format("The printed version looks like \"{0}\"", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new major.minor.revision.build version stamp")]
        [NUnit.Framework.TestCaseAttribute("0", "0", "2", "9876", "0.0.2.9876", new string[0])]
        [NUnit.Framework.TestCaseAttribute("0", "1", "3", "5432", "0.1.3.5432", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "0", "4", "2468", "1.0.4.2468", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "1", "5", "12", "1.1.5.12", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "2", "6", "98765", "9.2.6.98765", new string[0])]
        [NUnit.Framework.TestCaseAttribute("17", "3", "7", "0", "17.3.7.0", new string[0])]
        public virtual void CreateNewMajor_Minor_Revision_BuildVersionStamp(string major, string minor, string revision, string build, string printed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new major.minor.revision.build version stamp", exampleTags);
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given(string.Format("A new major.minor.revision.build version is created with {0}, {1}, {2} and {3}", major, minor, revision, build), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.When("The version is printed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then(string.Format("The printed version looks like \"{0}\"", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
