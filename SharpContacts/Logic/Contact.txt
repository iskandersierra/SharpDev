
aggregate Contact on http://models.imodelsoft.com/samples/enterprise/customer-relationship/contact-management/
	version is 0.1
	caption is Contacts
	description is Contacts feature allow to manage a collection of contact parties like people, companies, groups, etc. with a variety of contact information like name, email, phone numbers, department, employer, etc.
	author is Iskander Sierra

	// Local Types
	type ContactProperties (	// curly braces or parenthesis for definitions?
		Type,					// a property name without any type indication is a required string
		SubType?,				// a property with an interrogation indicates optionality
		Value, 
		NotBefore? is datetime, NotAfter? is datetime,	// The 'is' operator indicates a well-known type like string, integer, boolean, decimal, datetime, timelapse, etc.
		CultureName?, Preferred? is byte, ContentType?, 
		Where? is geometry		// the geometry type can be a JSON
	)

	// ----------- Events ----------- //
	event ContactActivated		( ContactId )
	event ContactDeactivated	( ContactId )
	
	event ContactTypeSet		( ContactId, Type )
	event ContactTypeUnset		( ContactId, Type )
	
	event ContactPropertySet	( ContactId, PropertyId, Properties is ContactProperties )
	event ContactPropertyUnset	( ContactId, PropertyId )

	// ----------- Commands ----------- //
	command CreateContact 
		generates ( ContactId )

	command InitializeContact 
		( 
			Types*, 
			Properties* is ContactProperties 
		) generates ( ContactId, PropertyIds* for Properties )

	command ActivateContact			( ContactId )
	command DeactivateContact		( ContactId )
	
	command SetContactType			( ContactId, Type )
	command UnsetContactType		( ContactId, Type )
	
	command CreateContactProperty	( ContactId, Properties is ContactProperties ) 
		generates ( PropertyId )
	command SetContactProperty		( ContactId, PropertyId, Properties is ContactProperties )
	command UnsetContactProperty	( ContactId, PropertyId )


	// ----------- States ----------- //
	state Main ( IsActive is boolean )
		on ContactActivated		do ( IsActive = true )
		on ContactDeactivated	do ( IsActive = false )

	state Types ( Types is set of string )
		on ContactTypeSet as event	 do ( Types add event.Type )
		on ContactTypeUnset as event do ( Types remove event.Type )

	state Properties ( Properties is map of string to ContactProperties )
		on ContactPropertySet as event	 do ( Properties map event.PropertyId to event.Properties )
		on ContactPropertyUnset as event do ( Properties remove event.PropertyId )

	// ----------- Handlers ----------- //
	handles CreateContact												// as command
		emiting ContactActivated											// ( ContactId = command.ContactId ) 
	
	handles ActivateContact												// as command
		emiting ContactActivated											// ( ContactId = command.ContactId )
	handles DeactivateContact											// as command
		emiting ContactDeactivated										// ( ContactId = command.ContactId )

	handles SetContactType emiting ContactTypeSet
	handles UnsetContactType emiting ContactTypeUnset

	handles CreateContactProperty
		emiting ContactPropertySet										// ( ContactId = command.ContactId, PropertyId = command.PropertyId, Properties = command.Properties )
	handles SetContactProperty
		emiting ContactPropertySet										// ( ContactId = command.ContactId, PropertyId = command.PropertyId, Properties = command.Properties )

	handles InitializeContact as command
		handling ActivateContact ( ContactId = command.ContactId )
		handling foreach t in command.Types do SetContactType ( ContactId = command.ContactId, Type = t )
		handling foreach p, pid in command.Properties, command.PropertyIds do SetContactType ( ContactId = command.ContactId, PropertyId = pid, Properties = p )

